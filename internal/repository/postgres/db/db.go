// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkProfileExistsStmt, err = db.PrepareContext(ctx, checkProfileExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckProfileExists: %w", err)
	}
	if q.countFoodsStmt, err = db.PrepareContext(ctx, countFoods); err != nil {
		return nil, fmt.Errorf("error preparing query CountFoods: %w", err)
	}
	if q.createFoodStmt, err = db.PrepareContext(ctx, createFood); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFood: %w", err)
	}
	if q.createFoodRatingStmt, err = db.PrepareContext(ctx, createFoodRating); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFoodRating: %w", err)
	}
	if q.createRefreshTokenStmt, err = db.PrepareContext(ctx, createRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRefreshToken: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserProfileStmt, err = db.PrepareContext(ctx, createUserProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserProfile: %w", err)
	}
	if q.deleteExpiredRefreshTokensStmt, err = db.PrepareContext(ctx, deleteExpiredRefreshTokens); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredRefreshTokens: %w", err)
	}
	if q.deleteFoodStmt, err = db.PrepareContext(ctx, deleteFood); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFood: %w", err)
	}
	if q.deleteFoodRatingStmt, err = db.PrepareContext(ctx, deleteFoodRating); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFoodRating: %w", err)
	}
	if q.deleteSavedFoodStmt, err = db.PrepareContext(ctx, deleteSavedFood); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSavedFood: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserProfileStmt, err = db.PrepareContext(ctx, deleteUserProfile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserProfile: %w", err)
	}
	if q.getDefaultUserProfileStmt, err = db.PrepareContext(ctx, getDefaultUserProfile); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultUserProfile: %w", err)
	}
	if q.getFoodByEAN13Stmt, err = db.PrepareContext(ctx, getFoodByEAN13); err != nil {
		return nil, fmt.Errorf("error preparing query GetFoodByEAN13: %w", err)
	}
	if q.getFoodByIDStmt, err = db.PrepareContext(ctx, getFoodByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFoodByID: %w", err)
	}
	if q.getFoodRatingStmt, err = db.PrepareContext(ctx, getFoodRating); err != nil {
		return nil, fmt.Errorf("error preparing query GetFoodRating: %w", err)
	}
	if q.getProfileByIDDirectStmt, err = db.PrepareContext(ctx, getProfileByIDDirect); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfileByIDDirect: %w", err)
	}
	if q.getRefreshTokenStmt, err = db.PrepareContext(ctx, getRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetRefreshToken: %w", err)
	}
	if q.getSavedFoodStmt, err = db.PrepareContext(ctx, getSavedFood); err != nil {
		return nil, fmt.Errorf("error preparing query GetSavedFood: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserProfileByIDStmt, err = db.PrepareContext(ctx, getUserProfileByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserProfileByID: %w", err)
	}
	if q.getUserProfilesStmt, err = db.PrepareContext(ctx, getUserProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserProfiles: %w", err)
	}
	if q.listAllergensStmt, err = db.PrepareContext(ctx, listAllergens); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllergens: %w", err)
	}
	if q.listFoodsStmt, err = db.PrepareContext(ctx, listFoods); err != nil {
		return nil, fmt.Errorf("error preparing query ListFoods: %w", err)
	}
	if q.listFoodsByTypeStmt, err = db.PrepareContext(ctx, listFoodsByType); err != nil {
		return nil, fmt.Errorf("error preparing query ListFoodsByType: %w", err)
	}
	if q.listHealthConditionsStmt, err = db.PrepareContext(ctx, listHealthConditions); err != nil {
		return nil, fmt.Errorf("error preparing query ListHealthConditions: %w", err)
	}
	if q.listSavedFoodsStmt, err = db.PrepareContext(ctx, listSavedFoods); err != nil {
		return nil, fmt.Errorf("error preparing query ListSavedFoods: %w", err)
	}
	if q.listUserRatingsStmt, err = db.PrepareContext(ctx, listUserRatings); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserRatings: %w", err)
	}
	if q.revokeAllUserRefreshTokensStmt, err = db.PrepareContext(ctx, revokeAllUserRefreshTokens); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeAllUserRefreshTokens: %w", err)
	}
	if q.revokeRefreshTokenStmt, err = db.PrepareContext(ctx, revokeRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeRefreshToken: %w", err)
	}
	if q.saveFoodStmt, err = db.PrepareContext(ctx, saveFood); err != nil {
		return nil, fmt.Errorf("error preparing query SaveFood: %w", err)
	}
	if q.searchFoodsByNameStmt, err = db.PrepareContext(ctx, searchFoodsByName); err != nil {
		return nil, fmt.Errorf("error preparing query SearchFoodsByName: %w", err)
	}
	if q.setProfileAsDefaultStmt, err = db.PrepareContext(ctx, setProfileAsDefault); err != nil {
		return nil, fmt.Errorf("error preparing query SetProfileAsDefault: %w", err)
	}
	if q.updateFoodRatingStmt, err = db.PrepareContext(ctx, updateFoodRating); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFoodRating: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserEmailVerificationStmt, err = db.PrepareContext(ctx, updateUserEmailVerification); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmailVerification: %w", err)
	}
	if q.updateUserLastLoginStmt, err = db.PrepareContext(ctx, updateUserLastLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserLastLogin: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserProfileStmt, err = db.PrepareContext(ctx, updateUserProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserProfile: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkProfileExistsStmt != nil {
		if cerr := q.checkProfileExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkProfileExistsStmt: %w", cerr)
		}
	}
	if q.countFoodsStmt != nil {
		if cerr := q.countFoodsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFoodsStmt: %w", cerr)
		}
	}
	if q.createFoodStmt != nil {
		if cerr := q.createFoodStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFoodStmt: %w", cerr)
		}
	}
	if q.createFoodRatingStmt != nil {
		if cerr := q.createFoodRatingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFoodRatingStmt: %w", cerr)
		}
	}
	if q.createRefreshTokenStmt != nil {
		if cerr := q.createRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRefreshTokenStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserProfileStmt != nil {
		if cerr := q.createUserProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserProfileStmt: %w", cerr)
		}
	}
	if q.deleteExpiredRefreshTokensStmt != nil {
		if cerr := q.deleteExpiredRefreshTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredRefreshTokensStmt: %w", cerr)
		}
	}
	if q.deleteFoodStmt != nil {
		if cerr := q.deleteFoodStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFoodStmt: %w", cerr)
		}
	}
	if q.deleteFoodRatingStmt != nil {
		if cerr := q.deleteFoodRatingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFoodRatingStmt: %w", cerr)
		}
	}
	if q.deleteSavedFoodStmt != nil {
		if cerr := q.deleteSavedFoodStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSavedFoodStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserProfileStmt != nil {
		if cerr := q.deleteUserProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserProfileStmt: %w", cerr)
		}
	}
	if q.getDefaultUserProfileStmt != nil {
		if cerr := q.getDefaultUserProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultUserProfileStmt: %w", cerr)
		}
	}
	if q.getFoodByEAN13Stmt != nil {
		if cerr := q.getFoodByEAN13Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFoodByEAN13Stmt: %w", cerr)
		}
	}
	if q.getFoodByIDStmt != nil {
		if cerr := q.getFoodByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFoodByIDStmt: %w", cerr)
		}
	}
	if q.getFoodRatingStmt != nil {
		if cerr := q.getFoodRatingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFoodRatingStmt: %w", cerr)
		}
	}
	if q.getProfileByIDDirectStmt != nil {
		if cerr := q.getProfileByIDDirectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileByIDDirectStmt: %w", cerr)
		}
	}
	if q.getRefreshTokenStmt != nil {
		if cerr := q.getRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getSavedFoodStmt != nil {
		if cerr := q.getSavedFoodStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSavedFoodStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserProfileByIDStmt != nil {
		if cerr := q.getUserProfileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserProfileByIDStmt: %w", cerr)
		}
	}
	if q.getUserProfilesStmt != nil {
		if cerr := q.getUserProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserProfilesStmt: %w", cerr)
		}
	}
	if q.listAllergensStmt != nil {
		if cerr := q.listAllergensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllergensStmt: %w", cerr)
		}
	}
	if q.listFoodsStmt != nil {
		if cerr := q.listFoodsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFoodsStmt: %w", cerr)
		}
	}
	if q.listFoodsByTypeStmt != nil {
		if cerr := q.listFoodsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFoodsByTypeStmt: %w", cerr)
		}
	}
	if q.listHealthConditionsStmt != nil {
		if cerr := q.listHealthConditionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHealthConditionsStmt: %w", cerr)
		}
	}
	if q.listSavedFoodsStmt != nil {
		if cerr := q.listSavedFoodsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSavedFoodsStmt: %w", cerr)
		}
	}
	if q.listUserRatingsStmt != nil {
		if cerr := q.listUserRatingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserRatingsStmt: %w", cerr)
		}
	}
	if q.revokeAllUserRefreshTokensStmt != nil {
		if cerr := q.revokeAllUserRefreshTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeAllUserRefreshTokensStmt: %w", cerr)
		}
	}
	if q.revokeRefreshTokenStmt != nil {
		if cerr := q.revokeRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeRefreshTokenStmt: %w", cerr)
		}
	}
	if q.saveFoodStmt != nil {
		if cerr := q.saveFoodStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing saveFoodStmt: %w", cerr)
		}
	}
	if q.searchFoodsByNameStmt != nil {
		if cerr := q.searchFoodsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchFoodsByNameStmt: %w", cerr)
		}
	}
	if q.setProfileAsDefaultStmt != nil {
		if cerr := q.setProfileAsDefaultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProfileAsDefaultStmt: %w", cerr)
		}
	}
	if q.updateFoodRatingStmt != nil {
		if cerr := q.updateFoodRatingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFoodRatingStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserEmailVerificationStmt != nil {
		if cerr := q.updateUserEmailVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailVerificationStmt: %w", cerr)
		}
	}
	if q.updateUserLastLoginStmt != nil {
		if cerr := q.updateUserLastLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserLastLoginStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserProfileStmt != nil {
		if cerr := q.updateUserProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserProfileStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	checkProfileExistsStmt          *sql.Stmt
	countFoodsStmt                  *sql.Stmt
	createFoodStmt                  *sql.Stmt
	createFoodRatingStmt            *sql.Stmt
	createRefreshTokenStmt          *sql.Stmt
	createUserStmt                  *sql.Stmt
	createUserProfileStmt           *sql.Stmt
	deleteExpiredRefreshTokensStmt  *sql.Stmt
	deleteFoodStmt                  *sql.Stmt
	deleteFoodRatingStmt            *sql.Stmt
	deleteSavedFoodStmt             *sql.Stmt
	deleteUserStmt                  *sql.Stmt
	deleteUserProfileStmt           *sql.Stmt
	getDefaultUserProfileStmt       *sql.Stmt
	getFoodByEAN13Stmt              *sql.Stmt
	getFoodByIDStmt                 *sql.Stmt
	getFoodRatingStmt               *sql.Stmt
	getProfileByIDDirectStmt        *sql.Stmt
	getRefreshTokenStmt             *sql.Stmt
	getSavedFoodStmt                *sql.Stmt
	getUserByEmailStmt              *sql.Stmt
	getUserByIDStmt                 *sql.Stmt
	getUserProfileByIDStmt          *sql.Stmt
	getUserProfilesStmt             *sql.Stmt
	listAllergensStmt               *sql.Stmt
	listFoodsStmt                   *sql.Stmt
	listFoodsByTypeStmt             *sql.Stmt
	listHealthConditionsStmt        *sql.Stmt
	listSavedFoodsStmt              *sql.Stmt
	listUserRatingsStmt             *sql.Stmt
	revokeAllUserRefreshTokensStmt  *sql.Stmt
	revokeRefreshTokenStmt          *sql.Stmt
	saveFoodStmt                    *sql.Stmt
	searchFoodsByNameStmt           *sql.Stmt
	setProfileAsDefaultStmt         *sql.Stmt
	updateFoodRatingStmt            *sql.Stmt
	updateUserStmt                  *sql.Stmt
	updateUserEmailVerificationStmt *sql.Stmt
	updateUserLastLoginStmt         *sql.Stmt
	updateUserPasswordStmt          *sql.Stmt
	updateUserProfileStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		checkProfileExistsStmt:          q.checkProfileExistsStmt,
		countFoodsStmt:                  q.countFoodsStmt,
		createFoodStmt:                  q.createFoodStmt,
		createFoodRatingStmt:            q.createFoodRatingStmt,
		createRefreshTokenStmt:          q.createRefreshTokenStmt,
		createUserStmt:                  q.createUserStmt,
		createUserProfileStmt:           q.createUserProfileStmt,
		deleteExpiredRefreshTokensStmt:  q.deleteExpiredRefreshTokensStmt,
		deleteFoodStmt:                  q.deleteFoodStmt,
		deleteFoodRatingStmt:            q.deleteFoodRatingStmt,
		deleteSavedFoodStmt:             q.deleteSavedFoodStmt,
		deleteUserStmt:                  q.deleteUserStmt,
		deleteUserProfileStmt:           q.deleteUserProfileStmt,
		getDefaultUserProfileStmt:       q.getDefaultUserProfileStmt,
		getFoodByEAN13Stmt:              q.getFoodByEAN13Stmt,
		getFoodByIDStmt:                 q.getFoodByIDStmt,
		getFoodRatingStmt:               q.getFoodRatingStmt,
		getProfileByIDDirectStmt:        q.getProfileByIDDirectStmt,
		getRefreshTokenStmt:             q.getRefreshTokenStmt,
		getSavedFoodStmt:                q.getSavedFoodStmt,
		getUserByEmailStmt:              q.getUserByEmailStmt,
		getUserByIDStmt:                 q.getUserByIDStmt,
		getUserProfileByIDStmt:          q.getUserProfileByIDStmt,
		getUserProfilesStmt:             q.getUserProfilesStmt,
		listAllergensStmt:               q.listAllergensStmt,
		listFoodsStmt:                   q.listFoodsStmt,
		listFoodsByTypeStmt:             q.listFoodsByTypeStmt,
		listHealthConditionsStmt:        q.listHealthConditionsStmt,
		listSavedFoodsStmt:              q.listSavedFoodsStmt,
		listUserRatingsStmt:             q.listUserRatingsStmt,
		revokeAllUserRefreshTokensStmt:  q.revokeAllUserRefreshTokensStmt,
		revokeRefreshTokenStmt:          q.revokeRefreshTokenStmt,
		saveFoodStmt:                    q.saveFoodStmt,
		searchFoodsByNameStmt:           q.searchFoodsByNameStmt,
		setProfileAsDefaultStmt:         q.setProfileAsDefaultStmt,
		updateFoodRatingStmt:            q.updateFoodRatingStmt,
		updateUserStmt:                  q.updateUserStmt,
		updateUserEmailVerificationStmt: q.updateUserEmailVerificationStmt,
		updateUserLastLoginStmt:         q.updateUserLastLoginStmt,
		updateUserPasswordStmt:          q.updateUserPasswordStmt,
		updateUserProfileStmt:           q.updateUserProfileStmt,
	}
}
