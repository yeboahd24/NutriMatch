// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (
    user_id,
    profile_name,
    is_default,
    health_conditions,
    dietary_restrictions,
    allergens,
    goal_type,
    calorie_target,
    macronutrient_preference,
    disliked_foods,
    preferred_foods,
    cuisine_preferences
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, user_id, profile_name, is_default, health_conditions, dietary_restrictions, allergens, goal_type, calorie_target, macronutrient_preference, disliked_foods, preferred_foods, cuisine_preferences, created_at, updated_at
`

type CreateUserProfileParams struct {
	UserID                  uuid.UUID             `json:"user_id"`
	ProfileName             string                `json:"profile_name"`
	IsDefault               sql.NullBool          `json:"is_default"`
	HealthConditions        pqtype.NullRawMessage `json:"health_conditions"`
	DietaryRestrictions     pqtype.NullRawMessage `json:"dietary_restrictions"`
	Allergens               pqtype.NullRawMessage `json:"allergens"`
	GoalType                sql.NullString        `json:"goal_type"`
	CalorieTarget           sql.NullInt32         `json:"calorie_target"`
	MacronutrientPreference sql.NullString        `json:"macronutrient_preference"`
	DislikedFoods           pqtype.NullRawMessage `json:"disliked_foods"`
	PreferredFoods          pqtype.NullRawMessage `json:"preferred_foods"`
	CuisinePreferences      pqtype.NullRawMessage `json:"cuisine_preferences"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.queryRow(ctx, q.createUserProfileStmt, createUserProfile,
		arg.UserID,
		arg.ProfileName,
		arg.IsDefault,
		arg.HealthConditions,
		arg.DietaryRestrictions,
		arg.Allergens,
		arg.GoalType,
		arg.CalorieTarget,
		arg.MacronutrientPreference,
		arg.DislikedFoods,
		arg.PreferredFoods,
		arg.CuisinePreferences,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProfileName,
		&i.IsDefault,
		&i.HealthConditions,
		&i.DietaryRestrictions,
		&i.Allergens,
		&i.GoalType,
		&i.CalorieTarget,
		&i.MacronutrientPreference,
		&i.DislikedFoods,
		&i.PreferredFoods,
		&i.CuisinePreferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM user_profiles
WHERE id = $1 AND user_id = $2
`

type DeleteUserProfileParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteUserProfile(ctx context.Context, arg DeleteUserProfileParams) error {
	_, err := q.exec(ctx, q.deleteUserProfileStmt, deleteUserProfile, arg.ID, arg.UserID)
	return err
}

const getDefaultUserProfile = `-- name: GetDefaultUserProfile :one
SELECT id, user_id, profile_name, is_default, health_conditions, dietary_restrictions, allergens, goal_type, calorie_target, macronutrient_preference, disliked_foods, preferred_foods, cuisine_preferences, created_at, updated_at FROM user_profiles
WHERE user_id = $1 AND is_default = true
LIMIT 1
`

func (q *Queries) GetDefaultUserProfile(ctx context.Context, userID uuid.UUID) (UserProfile, error) {
	row := q.queryRow(ctx, q.getDefaultUserProfileStmt, getDefaultUserProfile, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProfileName,
		&i.IsDefault,
		&i.HealthConditions,
		&i.DietaryRestrictions,
		&i.Allergens,
		&i.GoalType,
		&i.CalorieTarget,
		&i.MacronutrientPreference,
		&i.DislikedFoods,
		&i.PreferredFoods,
		&i.CuisinePreferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfileByID = `-- name: GetUserProfileByID :one
SELECT id, user_id, profile_name, is_default, health_conditions, dietary_restrictions, allergens, goal_type, calorie_target, macronutrient_preference, disliked_foods, preferred_foods, cuisine_preferences, created_at, updated_at FROM user_profiles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserProfileByID(ctx context.Context, id uuid.UUID) (UserProfile, error) {
	row := q.queryRow(ctx, q.getUserProfileByIDStmt, getUserProfileByID, id)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProfileName,
		&i.IsDefault,
		&i.HealthConditions,
		&i.DietaryRestrictions,
		&i.Allergens,
		&i.GoalType,
		&i.CalorieTarget,
		&i.MacronutrientPreference,
		&i.DislikedFoods,
		&i.PreferredFoods,
		&i.CuisinePreferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfiles = `-- name: GetUserProfiles :many
SELECT id, user_id, profile_name, is_default, health_conditions, dietary_restrictions, allergens, goal_type, calorie_target, macronutrient_preference, disliked_foods, preferred_foods, cuisine_preferences, created_at, updated_at FROM user_profiles
WHERE user_id = $1
ORDER BY is_default DESC, profile_name
`

func (q *Queries) GetUserProfiles(ctx context.Context, userID uuid.UUID) ([]UserProfile, error) {
	rows, err := q.query(ctx, q.getUserProfilesStmt, getUserProfiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserProfile{}
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProfileName,
			&i.IsDefault,
			&i.HealthConditions,
			&i.DietaryRestrictions,
			&i.Allergens,
			&i.GoalType,
			&i.CalorieTarget,
			&i.MacronutrientPreference,
			&i.DislikedFoods,
			&i.PreferredFoods,
			&i.CuisinePreferences,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setProfileAsDefault = `-- name: SetProfileAsDefault :exec
WITH updated_profile AS (
    UPDATE user_profiles
    SET is_default = true
    WHERE user_profiles.id = $1 AND user_profiles.user_id = $2
)
UPDATE user_profiles
SET is_default = false
WHERE user_profiles.user_id = $2 AND user_profiles.id != $1
`

type SetProfileAsDefaultParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) SetProfileAsDefault(ctx context.Context, arg SetProfileAsDefaultParams) error {
	_, err := q.exec(ctx, q.setProfileAsDefaultStmt, setProfileAsDefault, arg.ID, arg.UserID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profiles
SET
    profile_name = COALESCE($3, profile_name),
    health_conditions = COALESCE($4, health_conditions),
    dietary_restrictions = COALESCE($5, dietary_restrictions),
    allergens = COALESCE($6, allergens),
    goal_type = COALESCE($7, goal_type),
    calorie_target = COALESCE($8, calorie_target),
    macronutrient_preference = COALESCE($9, macronutrient_preference),
    disliked_foods = COALESCE($10, disliked_foods),
    preferred_foods = COALESCE($11, preferred_foods),
    cuisine_preferences = COALESCE($12, cuisine_preferences),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, profile_name, is_default, health_conditions, dietary_restrictions, allergens, goal_type, calorie_target, macronutrient_preference, disliked_foods, preferred_foods, cuisine_preferences, created_at, updated_at
`

type UpdateUserProfileParams struct {
	ID                      uuid.UUID             `json:"id"`
	UserID                  uuid.UUID             `json:"user_id"`
	ProfileName             string                `json:"profile_name"`
	HealthConditions        pqtype.NullRawMessage `json:"health_conditions"`
	DietaryRestrictions     pqtype.NullRawMessage `json:"dietary_restrictions"`
	Allergens               pqtype.NullRawMessage `json:"allergens"`
	GoalType                sql.NullString        `json:"goal_type"`
	CalorieTarget           sql.NullInt32         `json:"calorie_target"`
	MacronutrientPreference sql.NullString        `json:"macronutrient_preference"`
	DislikedFoods           pqtype.NullRawMessage `json:"disliked_foods"`
	PreferredFoods          pqtype.NullRawMessage `json:"preferred_foods"`
	CuisinePreferences      pqtype.NullRawMessage `json:"cuisine_preferences"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.queryRow(ctx, q.updateUserProfileStmt, updateUserProfile,
		arg.ID,
		arg.UserID,
		arg.ProfileName,
		arg.HealthConditions,
		arg.DietaryRestrictions,
		arg.Allergens,
		arg.GoalType,
		arg.CalorieTarget,
		arg.MacronutrientPreference,
		arg.DislikedFoods,
		arg.PreferredFoods,
		arg.CuisinePreferences,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProfileName,
		&i.IsDefault,
		&i.HealthConditions,
		&i.DietaryRestrictions,
		&i.Allergens,
		&i.GoalType,
		&i.CalorieTarget,
		&i.MacronutrientPreference,
		&i.DislikedFoods,
		&i.PreferredFoods,
		&i.CuisinePreferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
