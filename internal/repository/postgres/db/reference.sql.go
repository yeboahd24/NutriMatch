// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reference.sql

package db

import (
	"context"
)

const listAllergens = `-- name: ListAllergens :many
SELECT id, name, description, common_names, created_at
FROM allergens
ORDER BY name
`

func (q *Queries) ListAllergens(ctx context.Context) ([]Allergen, error) {
	rows, err := q.query(ctx, q.listAllergensStmt, listAllergens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Allergen{}
	for rows.Next() {
		var i Allergen
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CommonNames,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHealthConditions = `-- name: ListHealthConditions :many
SELECT id, name, description, nutrient_restrictions, nutrient_recommendations, created_at
FROM health_conditions
ORDER BY name
`

func (q *Queries) ListHealthConditions(ctx context.Context) ([]HealthCondition, error) {
	rows, err := q.query(ctx, q.listHealthConditionsStmt, listHealthConditions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HealthCondition{}
	for rows.Next() {
		var i HealthCondition
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.NutrientRestrictions,
			&i.NutrientRecommendations,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
