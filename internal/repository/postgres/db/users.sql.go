// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password_hash,
    first_name,
    last_name,
    date_of_birth,
    gender,
    height_cm,
    weight_kg,
    activity_level
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, email, password_hash, first_name, last_name, date_of_birth, gender, height_cm, weight_kg, activity_level, created_at, updated_at, last_login, account_status, email_verified, mfa_enabled, mfa_secret
`

type CreateUserParams struct {
	Email         string         `json:"email"`
	PasswordHash  string         `json:"password_hash"`
	FirstName     sql.NullString `json:"first_name"`
	LastName      sql.NullString `json:"last_name"`
	DateOfBirth   sql.NullTime   `json:"date_of_birth"`
	Gender        sql.NullString `json:"gender"`
	HeightCm      sql.NullString `json:"height_cm"`
	WeightKg      sql.NullString `json:"weight_kg"`
	ActivityLevel sql.NullString `json:"activity_level"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.HeightCm,
		arg.WeightKg,
		arg.ActivityLevel,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.HeightCm,
		&i.WeightKg,
		&i.ActivityLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.AccountStatus,
		&i.EmailVerified,
		&i.MfaEnabled,
		&i.MfaSecret,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, first_name, last_name, date_of_birth, gender, height_cm, weight_kg, activity_level, created_at, updated_at, last_login, account_status, email_verified, mfa_enabled, mfa_secret FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.HeightCm,
		&i.WeightKg,
		&i.ActivityLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.AccountStatus,
		&i.EmailVerified,
		&i.MfaEnabled,
		&i.MfaSecret,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, first_name, last_name, date_of_birth, gender, height_cm, weight_kg, activity_level, created_at, updated_at, last_login, account_status, email_verified, mfa_enabled, mfa_secret FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.HeightCm,
		&i.WeightKg,
		&i.ActivityLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.AccountStatus,
		&i.EmailVerified,
		&i.MfaEnabled,
		&i.MfaSecret,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    date_of_birth = COALESCE($4, date_of_birth),
    gender = COALESCE($5, gender),
    height_cm = COALESCE($6, height_cm),
    weight_kg = COALESCE($7, weight_kg),
    activity_level = COALESCE($8, activity_level),
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, password_hash, first_name, last_name, date_of_birth, gender, height_cm, weight_kg, activity_level, created_at, updated_at, last_login, account_status, email_verified, mfa_enabled, mfa_secret
`

type UpdateUserParams struct {
	ID            uuid.UUID      `json:"id"`
	FirstName     sql.NullString `json:"first_name"`
	LastName      sql.NullString `json:"last_name"`
	DateOfBirth   sql.NullTime   `json:"date_of_birth"`
	Gender        sql.NullString `json:"gender"`
	HeightCm      sql.NullString `json:"height_cm"`
	WeightKg      sql.NullString `json:"weight_kg"`
	ActivityLevel sql.NullString `json:"activity_level"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.HeightCm,
		arg.WeightKg,
		arg.ActivityLevel,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.HeightCm,
		&i.WeightKg,
		&i.ActivityLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.AccountStatus,
		&i.EmailVerified,
		&i.MfaEnabled,
		&i.MfaSecret,
	)
	return i, err
}

const updateUserEmailVerification = `-- name: UpdateUserEmailVerification :exec
UPDATE users
SET
    email_verified = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserEmailVerificationParams struct {
	ID            uuid.UUID    `json:"id"`
	EmailVerified sql.NullBool `json:"email_verified"`
}

func (q *Queries) UpdateUserEmailVerification(ctx context.Context, arg UpdateUserEmailVerificationParams) error {
	_, err := q.exec(ctx, q.updateUserEmailVerificationStmt, updateUserEmailVerification, arg.ID, arg.EmailVerified)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET
    last_login = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.updateUserLastLoginStmt, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password_hash = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
